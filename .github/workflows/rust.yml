name: Rust

on:
  push:
    tags:
      - '*'

env:
  CARGO_TERM_COLOR: always
permissions:
  contents: write
defaults:
  run:
    # necessary for windows
    shell: bash

jobs:
  #  test:
  #    runs-on: ubuntu-latest
  #    steps:
  #      - uses: actions/checkout@v2
  #      - name: Init submodules
  #        uses: snickerbockers/submodules-init@v4
  #      - name: Cargo cache
  #        uses: actions/cache@v2
  #        with:
  #          path: |
  #            ~/.cargo/registry
  #            ./target
  #          key: test-cargo-registry
  #      - name: List
  #        run: find ./
  #      - name: Run tests
  #        run: cargo test --verbose

  build:
    strategy:
      fail-fast: false
      matrix:
        # a list of all the targets
        # 选择使用openssl或者ring，并不是所有平台都支持
        include:
          - TARGET: i686-unknown-linux-musl # test in an alpine container on a mac
            OS: ubuntu-latest
            FEATURES: ring-cipher,openssl-vendored,wss
          - TARGET: x86_64-unknown-linux-musl # test in an alpine container on a mac
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: aarch64-unknown-linux-musl # tested on aws t4g.nano in alpine container
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: armv7-unknown-linux-musleabihf # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: armv7-unknown-linux-musleabi # raspberry pi 2-3-4, not tested
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: arm-unknown-linux-musleabihf # raspberry pi 0-1, not tested
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: arm-unknown-linux-musleabi # raspberry pi 0-1, not tested
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: x86_64-apple-darwin # tested on a mac, is not properly signed so there are security warnings
            OS: macos-latest
            FEATURES: ring-cipher,wss
          - TARGET: aarch64-apple-darwin # tested on a mac, is not properly signed so there are security warnings
            OS: macos-latest
            FEATURES: ring-cipher,wss
          - TARGET: i686-pc-windows-msvc # tested on a windows machine
            OS: windows-2019
            FEATURES: ring-cipher,wss
          - TARGET: x86_64-pc-windows-msvc # tested on a windows machine
            OS: windows-latest
            FEATURES: ring-cipher,wss
          - TARGET: aarch64-pc-windows-msvc # Windows ARM64 support
            OS: windows-latest
            FEATURES: ring-cipher,wss
          - TARGET: mipsel-unknown-linux-musl # openwrt
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
          - TARGET: mips-unknown-linux-musl # openwrt
            OS: ubuntu-latest
            FEATURES: ring-cipher,wss
    # needs: test
    runs-on: ${{ matrix.OS }}
    env:
      NAME: vnt-cli
      TARGET: ${{ matrix.TARGET }}
      OS: ${{ matrix.OS }}
      FEATURES: ${{ matrix.FEATURES }}
    steps:
      - uses: actions/checkout@v4
      - name: Init submodules
        uses: snickerbockers/submodules-init@v4
      - name: Cargo cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ./target
          key: build-cargo-registry-${{matrix.TARGET}}
      - name: Set env
        if: matrix.OS == 'windows-latest'
        run: echo OPENSSL_SRC_PERL=C:/Strawberry/perl/bin/perl >> $GITHUB_ENV
      - name: List
        run: find ./
      - name: Install and configure dependencies
        run: |
          # dependencies are only needed on ubuntu as that's the only place where
          # we make cross-compilation
          rustup set auto-self-update disable

          if [[ $OS =~ ^ubuntu.*$ ]]; then
            sudo apt-get update && sudo apt-get install clang llvm libc6-dev-i386 crossbuild-essential-arm64 crossbuild-essential-armhf musl-tools libboost-all-dev libc6-dev -y
            #  curl -s musl.cc | grep mipsel
            case $TARGET in
              mipsel-unknown-linux-musl)
                MUSL_URI=mipsel-linux-muslsf-cross
                URL=mipsel-linux-muslsf
                ;;
              aarch64-unknown-linux-musl)
                MUSL_URI=aarch64-linux-musl-cross
                ;;
              armv7-unknown-linux-musleabihf)
                MUSL_URI=armv7l-linux-musleabihf-cross
                ;;
              armv7-unknown-linux-musleabi)
                MUSL_URI=armv7m-linux-musleabi-cross
                ;;
              arm-unknown-linux-musleabihf)
                MUSL_URI=arm-linux-musleabihf-cross
                ;;
              arm-unknown-linux-musleabi)
                MUSL_URI=arm-linux-musleabi-cross
                ;;
              mips-unknown-linux-musl)
                MUSL_URI=mips-linux-muslsf-cross
                URL=mips-linux-muslsf
                ;;
            esac
            if [[ ! -z $MUSL_URI ]]; then
              mkdir -p /opt/musl_gcc 
              wget -c https://musl.cc/$MUSL_URI.tgz -P /opt/musl_gcc/
              tar zxf /opt/musl_gcc/$MUSL_URI.tgz -C /opt/musl_gcc/
              sudo ln -s /opt/musl_gcc/$MUSL_URI/bin/*gcc /usr/bin/
            fi
          else
              rustup install nightly
              rustup default nightly
          fi
          if [[ $TARGET =~ ^mips.*$ ]]; then
              # mips平台使用nightly版本
              cd /opt/musl_gcc/${URL}-cross/lib/gcc/${URL}/11.2.1
              sudo cp crtbegin.o crtbeginS.o
              sudo cp crtend.o crtendS.o
              rustup install nightly
              rustup default nightly
              RUST_LIB_SRC=$HOME/.rustup/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/
              if [[ -f $RUST_LIB_SRC/library/Cargo.lock && ! -f $RUST_LIB_SRC/Cargo.lock ]]; then 
                 cp -f $RUST_LIB_SRC/library/Cargo.lock $RUST_LIB_SRC/Cargo.lock
              fi 
          else
              rustup install nightly
              rustup default nightly
          fi
          rustup -V
          
          # some additional configuration for cross-compilation on linux
          cat >>~/.cargo/config <<EOF
          [target.x86_64-unknown-linux-musl]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.aarch64-unknown-linux-musl]
          linker = "aarch64-linux-musl-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.armv7-unknown-linux-musleabihf]
          linker = "armv7l-linux-musleabihf-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.armv7-unknown-linux-musleabi]
          linker = "armv7m-linux-musleabi-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.arm-unknown-linux-musleabihf]
          linker = "arm-linux-musleabihf-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]   
          [target.arm-unknown-linux-musleabi]
          linker = "arm-linux-musleabi-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]
          [target.mipsel-unknown-linux-musl]
          linker = "mipsel-linux-muslsf-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C", "link-arg=-static",
          "-C", "relocation-model=static","-C", "link-arg=-no-pie","--cfg", "compiler_builtins_no_debug",
          "-L", "/opt/musl_gcc/mipsel-linux-muslsf-cross/mipsel-linux-muslsf/lib",
          "-L", "/opt/musl_gcc/mipsel-linux-muslsf-cross/lib/gcc/mipsel-linux-muslsf/11.2.1"]
          [target.mips-unknown-linux-musl]
          linker = "mips-linux-muslsf-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols","-C", "link-arg=-static",
          "-C", "relocation-model=static","-C", "link-arg=-no-pie","--cfg", "compiler_builtins_no_debug",
          "-L", "/opt/musl_gcc/mips-linux-muslsf-cross/mips-linux-muslsf/lib",
          "-L", "/opt/musl_gcc/mips-linux-muslsf-cross/lib/gcc/mips-linux-muslsf/11.2.1"]
          [target.x86_64-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]    
          [target.i686-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]      
          [target.aarch64-pc-windows-msvc]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]      
          [target.x86_64-apple-darwin]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"] 
          [target.aarch64-apple-darwin]
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]     
          [target.i686-unknown-linux-musl]
          linker = "i686-linux-musl-gcc"
          rustflags = ["-C", "target-feature=+crt-static","-C", "strip=symbols"]   
          EOF
      - name: Install rust target
        if: ${{ ! startsWith(matrix.TARGET, 'mips') }}
        run: rustup target add $TARGET
      - name: Run build vn-link-cli
        run: |
          if [[ $TARGET =~ ^mips.*$ ]]; then
            cargo +nightly build --package vn-link-cli --release --verbose --target $TARGET -Z build-std=std,panic_abort --features $FEATURES
          else
            cargo build --package vn-link-cli --release --verbose --target $TARGET --features $FEATURES
          fi
      - name: Run build vnt-cli
        run: |
          if [[ $TARGET =~ ^mips.*$ ]]; then
            cargo +nightly build --package vnt-cli --release --verbose --target $TARGET -Z build-std=std,panic_abort --features $FEATURES
          else
            cargo build --package vnt-cli --release --verbose --target $TARGET --features $FEATURES
          fi
      - name: List target
        run: find ./target
      - name: Compress
        run: |
          mkdir -p ./artifacts
          # windows is the only OS using a different convention for executable file name
          if [[ $OS =~ ^windows.*$ ]]; then
              EXEC=$NAME.exe
              EXEC_VN_LINK=vn-link-cli.exe
          else
              EXEC=$NAME
              EXEC_VN_LINK=vn-link-cli
          fi
          if [[ $GITHUB_REF_TYPE =~ ^tag$ ]]; then
            TAG=$GITHUB_REF_NAME
          else
            TAG=$GITHUB_SHA
          fi
          mv ./target/$TARGET/release/$EXEC ./$EXEC
          mv ./target/$TARGET/release/$EXEC_VN_LINK ./$EXEC_VN_LINK
          tar -czf ./artifacts/$NAME-$TARGET-$TAG.tar.gz $EXEC $EXEC_VN_LINK
          if [[ $OS =~ ^windows.*$ ]]; then
            certutil -hashfile ./artifacts/$NAME-$TARGET-$TAG.tar.gz sha256 | grep -E [A-Fa-f0-9]{64} > ./artifacts/$NAME-$TARGET-$TAG.sha256
          else
            shasum -a 256 ./artifacts/$NAME-$TARGET-$TAG.tar.gz > ./artifacts/$NAME-$TARGET-$TAG.sha256
          fi
      - name: Archive artifact
        uses: actions/upload-artifact@v4
        with:
          name: result-${{ matrix.TARGET }}
          path: |
            ./artifacts

  # deploys to github releases on tag
  deploy:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true
          path: ./artifacts
      - name: List
        run: find ./artifacts
      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          files: ./artifacts/*.tar.gz,./artifacts/*.sha256
